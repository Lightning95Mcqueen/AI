import queue as Q
from RMP import dict_gn

start = 'Arad'
goal = 'Bucharest'
result = ''

def BFS(city, cityq, visitedq):
    global result
    if city == goal:  # Check if we reached the goal
        result += " " + city
        return True  # Return True if goal is found

    for eachcity in dict_gn[city].keys():
        if eachcity == goal:  # Check if the next city is the goal
            result += " " + eachcity
            return True  # Return True if goal is found
        if eachcity not in visitedq.queue and eachcity not in cityq.queue:
            cityq.put(eachcity)
            result += " " + eachcity
            
    visitedq.put(city)  # Mark the city as visited
    if not cityq.empty():  # Check if there are more cities to explore
        return BFS(cityq.get(), cityq, visitedq)
    return False  # If the queue is empty, return False

def main():
    cityq = Q.Queue()
    visitedq = Q.Queue()
    cityq.put(start)  # Start the BFS with the start city
    visitedq.put(start)  # Mark the start city as visited

    found = BFS(start, cityq, visitedq)  # Run BFS
    if found:
        print("BFS Traversal From", start, "to", goal, "is:")
        print(result)
    else:
        print("Path not found from", start, "to", goal)

main()





RMP.py


dict_gn = {
    'Arad': {'Zerind': 75, 'Sibiu': 140, 'Timisoara': 118},
    'Zerind': {'Arad': 75, 'Oradea': 71},
    'Oradea': {'Zerind': 71, 'Sibiu': 151},
    'Sibiu': {'Arad': 140, 'Oradea': 151, 'Fagaras': 99, 'Rimnicu': 80},
    'Timisoara': {'Arad': 118, 'Lugoj': 111},
    'Lugoj': {'Timisoara': 111, 'Mehadia': 70},
    'Mehadia': {'Lugoj': 70, 'Drobeta': 75},
    'Drobeta': {'Mehadia': 75, 'Craiova': 120},
    'Craiova': {'Drobeta': 120, 'Rimnicu': 146, 'Pitesti': 138},
    'Rimnicu': {'Sibiu': 80, 'Craiova': 146, 'Pitesti': 97},
    'Fagaras': {'Sibiu': 99, 'Bucharest': 211},
    'Pitesti': {'Rimnicu': 97, 'Craiova': 138, 'Bucharest': 101},
    'Bucharest': {'Fagaras': 211, 'Pitesti': 101, 'Giurgiu': 90, 'Urziceni': 85},
    'Giurgiu': {'Bucharest': 90},
    'Urziceni': {'Bucharest': 85, 'Vaslui': 142, 'Hirsova': 98},
    'Vaslui': {'Urziceni': 142, 'Iasi': 92},
    'Iasi': {'Vaslui': 92, 'Neamt': 87},
    'Neamt': {'Iasi': 87},
    'Hirsova': {'Urziceni': 98, 'Eforie': 86},
    'Eforie': {'Hirsova': 86}
}


dict_hn = {
    'Arad': 366,
    'Zerind': 374,
    'Oradea': 380,
    'Sibiu': 253,
    'Timisoara': 329,
    'Lugoj': 244,
    'Mehadia': 241,
    'Drobeta': 242,
    'Craiova': 160,
    'Rimnicu': 193,
    'Fagaras': 178,
    'Pitesti': 98,
    'Bucharest': 0,
    'Giurgiu': 77,
    'Urziceni': 80,
    'Vaslui': 199,
    'Iasi': 226,
    'Neamt': 234,
    'Hirsova': 151,
    'Eforie': 161
}


