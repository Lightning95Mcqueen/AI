A* Search and Recursive Best-First Search 
Code: Implement the A* Search algorithm for solving a pathfinding problem.

import queue as Q
from RMP import dict_gn
from RMP import dict_hn

start = 'Arad'
goal = 'Bucharest'
result = ''

def get_fn(citystr):
    cities = citystr.split(",")
    gn = 0
    for ctr in range(len(cities) - 1):
        gn += dict_gn[cities[ctr]][cities[ctr + 1]]  # Accumulate the cost
    hn = dict_hn[cities[-1]]  # Get the heuristic for the last city
    return hn + gn  # Return total cost (heuristic + path cost)

def expand(cityq):
    global result
    if cityq.empty():  # Check if the queue is empty
        return

    tot, citystr, thiscity = cityq.get()  # Get the city with the lowest f(n)
    
    if thiscity == goal:  # If goal is reached
        result = citystr + "::" + str(tot)  # Store the result
        return

    for cty in dict_gn[thiscity]:  # Expand neighbors
        cityq.put((get_fn(citystr + "," + cty), citystr + "," + cty, cty))

    expand(cityq)  # Recur to continue expanding

def main():
    cityq = Q.PriorityQueue()
    cityq.put((get_fn(start), start, start))  # Initialize with the start city
    expand(cityq)  # Start the expansion

    if result:  # Check if a path was found
        print("The A* path with the total is:")
        print(result)
    else:
        print("No path found from", start, "to", goal)

main()

RMP.py


dict_gn = {
    'Arad': {'Zerind': 75, 'Sibiu': 140, 'Timisoara': 118},
    'Zerind': {'Arad': 75, 'Oradea': 71},
    'Oradea': {'Zerind': 71, 'Sibiu': 151},
    'Sibiu': {'Arad': 140, 'Oradea': 151, 'Fagaras': 99, 'Rimnicu': 80},
    'Timisoara': {'Arad': 118, 'Lugoj': 111},
    'Lugoj': {'Timisoara': 111, 'Mehadia': 70},
    'Mehadia': {'Lugoj': 70, 'Drobeta': 75},
    'Drobeta': {'Mehadia': 75, 'Craiova': 120},
    'Craiova': {'Drobeta': 120, 'Rimnicu': 146, 'Pitesti': 138},
    'Rimnicu': {'Sibiu': 80, 'Craiova': 146, 'Pitesti': 97},
    'Fagaras': {'Sibiu': 99, 'Bucharest': 211},
    'Pitesti': {'Rimnicu': 97, 'Craiova': 138, 'Bucharest': 101},
    'Bucharest': {'Fagaras': 211, 'Pitesti': 101, 'Giurgiu': 90, 'Urziceni': 85},
    'Giurgiu': {'Bucharest': 90},
    'Urziceni': {'Bucharest': 85, 'Vaslui': 142, 'Hirsova': 98},
    'Vaslui': {'Urziceni': 142, 'Iasi': 92},
    'Iasi': {'Vaslui': 92, 'Neamt': 87},
    'Neamt': {'Iasi': 87},
    'Hirsova': {'Urziceni': 98, 'Eforie': 86},
    'Eforie': {'Hirsova': 86}
}


dict_hn = {
    'Arad': 366,
    'Zerind': 374,
    'Oradea': 380,
    'Sibiu': 253,
    'Timisoara': 329,
    'Lugoj': 244,
    'Mehadia': 241,
    'Drobeta': 242,
    'Craiova': 160,
    'Rimnicu': 193,
    'Fagaras': 178,
    'Pitesti': 98,
    'Bucharest': 0,
    'Giurgiu': 77,
    'Urziceni': 80,
    'Vaslui': 199,
    'Iasi': 226,
    'Neamt': 234,
    'Hirsova': 151,
    'Eforie': 161
}

Code: Implement the Recursive Best-First Search algorithm for the same problem. 

import queue as Q
from RMP import dict_gn
from RMP import dict_hn

start = 'Arad'
goal = 'Bucharest'
result = ''

def get_fn(citystr):
    cities = citystr.split(",")
    gn = 0
    for ctr in range(len(cities) - 1):
        gn += dict_gn[cities[ctr]][cities[ctr + 1]]  # Accumulate the cost
    hn = dict_hn[cities[-1]]  # Get the heuristic for the last city
    return hn + gn  # Return total cost (heuristic + path cost)

def printout(cityq):
    # Print the current state of the priority queue
    print("Current Queue State:")
    for item in cityq.queue:
        print(item)

def expand(cityq):
    global result
    
    if cityq.empty():  # Check if there are no more cities to explore
        return
    
    tot, citystr, thiscity = cityq.get()  # Get city with lowest f(n)
    
    # Check if we've reached the goal
    if thiscity == goal:
        result = citystr + "::" + str(tot)  # Store the result
        return 

    print("Expanded city ---------", thiscity)
    
    # Get the next best f(n) if available
    nexttot = float('inf')
    if not cityq.empty():
        nexttot, _, _ = cityq.queue[0]  # Get the next best city
    
    tempq = Q.PriorityQueue()  # Temporary priority queue for neighbors
    
    # Expand neighbors
    for cty in dict_gn[thiscity]:
        tempq.put((get_fn(citystr + ',' + cty), citystr + ',' + cty, cty))

    # Add neighbors to the main queue
    for _ in range(min(3, tempq.qsize())):  # Limit to the best 2 or 3 neighbors
        ctrtot, ctrcitystr, ctrthiscity = tempq.get()
        if ctrtot < nexttot:
            cityq.put((ctrtot, ctrcitystr, ctrthiscity))
        else:
            cityq.put((ctrtot, citystr, thiscity))
            break

    printout(cityq)  # Print the state of the queue after expansion
    expand(cityq)  # Continue the expansion

def main():
    cityq = Q.PriorityQueue()
    cityq.put((float('inf'), "NA", "NA"))  # Placeholder for comparison
    cityq.put((get_fn(start), start, start))  # Start from the initial city
    expand(cityq)  # Start the expansion
    
    if result:  # Check if a path was found
        print("The A* path with the total is:")
        print(result)
    else:
        print("No path found from", start, "to", goal)

main()
